{"version":3,"sources":["Components/Header.js","Components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","SearchMovies","useState","searching","setSearching","message","setMessage","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","url","fetch","response","json","data","console","log","Search","onSubmit","type","name","placeholder","value","onChange","target","fill","stroke","stroke-linecap","stroke-linejoin","stroke-width","viewBox","d","map","movie","key","imdbID","src","Poster","alt","Title","Year","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"sOAgBeA,E,uKAXP,OACI,yBAAKC,UAAY,sDACb,yBAAKA,UAAU,qBACX,wBAAIA,UAAU,wCAAd,wB,GALCC,IAAMC,W,8BC0DZC,MA3Df,WAAwB,IAAD,EACeC,oBAAS,GADxB,mBACZC,EADY,KACDC,EADC,OAEWF,mBAAS,MAFpB,mBAEZG,EAFY,KAEHC,EAFG,OAGOJ,mBAAS,IAHhB,mBAGZK,EAHY,KAGLC,EAHK,OAISN,mBAAS,IAJlB,mBAIZO,EAJY,KAIJC,EAJI,KAMbC,EAAY,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DACjBD,EAAEE,iBACFV,GAAa,GAEPW,EAJW,sDAI0CR,EAJ1C,mCAOUS,MAAMD,GAPhB,cAOPE,EAPO,gBAQMA,EAASC,OARf,OAQPC,EARO,OASbC,QAAQC,IAAIF,GACZb,EAAW,MACXI,EAAUS,EAAKG,QACflB,GAAa,GAZA,kDAcbE,EAAW,gCACXF,GAAa,GAfA,0DAAH,sDAmBlB,OACI,yBAAKN,UAAU,0BACX,yBAAKA,UAAU,qEACX,0BAAMA,UAAU,gGAAgGyB,SAAUZ,GACtH,2BAAOa,KAAK,OAAOC,KAAK,QAAQC,YAAY,2BACxC5B,UAAU,6EACV6B,MAAOpB,EAAOqB,SAAU,SAAChB,GAAD,OAAMJ,EAASI,EAAEiB,OAAOF,UAEpD,4BAAQH,KAAK,SAAS1B,UAAU,4DAC5B,yBAAKgC,KAAK,OAAOC,OAAO,eAAeC,iBAAe,QAAQC,kBAAgB,QAAQC,eAAa,IAC/FC,QAAQ,YAAYrC,UAAU,WAClC,0BAAMsC,EAAE,oDAKpB,yBAAKtC,UAAU,qBACVK,IAAcE,EAAY,8CAA4BA,EAAY,yBAAKP,UAAY,WAAjB,IAA6BO,EAA7B,KAClEI,EAAO4B,KAAI,SAAAC,GAAK,OACb,yBAAKxC,UAAU,+BACX,yBAAKA,UAAY,0DAA0DyC,IAAOD,EAAME,QACpF,yBAAKC,IAAKH,EAAMI,OAAQC,IAAI,aAAa7C,UAAU,gBACnD,yBAAKA,UAAU,OACX,uBAAGA,UAAU,uBAAb,UAA0C,0BAAMA,UAAU,wCAAwCwC,EAAMM,QACxG,uBAAG9C,UAAU,uBAAb,oBAAoD,0BAAMA,UAAU,yBAAyBwC,EAAMO,gBCjCpHC,MAZf,WAEE,OACI,yBAAKhD,UAAU,uBACb,yBAAKA,UAAU,2BACb,kBAAC,EAAD,MACA,kBAACwB,EAAD,SCAUyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAM3D,a","file":"static/js/main.d02212b8.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\n\nclass Header extends React.Component {\n    render(){\n        return ( \n            <nav className = \"relative mx-auto bg-indigo-700 max-w-7xl py-4 px-4\">\n                <div className=\"container mx-auto\">\n                    <h1 className=\"text-white text-center text-3xl pb-4\"> Movie Search </h1>\n                </div>\n            </nav>\n    \n        )\n    }\n}\n\nexport default Header","import React, {useState} from 'react';\n\nfunction SearchMovies(){\n    const [searching, setSearching] = useState(false);\n    const [message, setMessage] = useState(null);\n    const [query, setQuery] = useState('');\n    const [movies, setMovies] = useState([]);\n\n    const searchMovies = async(e) =>{\n        e.preventDefault();\n        setSearching(true);\n\n        const url = `https://www.omdbapi.com/?&apikey=e1a73560&s=${query}&type=\"movie\"`;\n\n        try{\n            const response = await fetch(url);\n            const data = await response.json();\n            console.log(data);\n            setMessage(null);\n            setMovies(data.Search);\n            setSearching(false);\n        }catch(err){\n            setMessage('An unexpected error occured.')\n            setSearching(false);\n        }\n        \n    }\n    return (\n        <div className=\"container mx-auto pt-6\">\n            <div className=\"flex justify-center max-w-screen-sm mx-auto overflow-hidden px-10\">\n                <form className=\"w-full h-10 pl-3 pr-2 bg-white border rounded-full flex justify-between items-center relative\" onSubmit={searchMovies}>\n                    <input type=\"text\" name=\"query\" placeholder=\"Search movies by name...\"\n                        className=\"appearance-none w-full outline-none focus:outline-none active:outline-none\"\n                        value={query} onChange={(e) =>setQuery(e.target.value)}\n                    />\n                    <button type=\"submit\" className=\"ml-1 outline-none focus:outline-none active:outline-none\">\n                        <svg fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                            viewBox=\"0 0 24 24\" className=\"w-6 h-6\">\n                        <path d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"></path>\n                        </svg>\n                    </button>\n                </form>\n            </div>\n            <div className=\"container mx-auto\">\n                {searching && !message ? ( <span> loading... </span>): message ? ( <div className = \"message\"> {message} </div>):\n                (movies.map(movie => (\n                    <div className=\"inline-block px-2 w-64 h-64\">\n                        <div className = \"bg-white rounded-lg overflow-hidden shadow-xl my-8 py-4\" key = {movie.imdbID}>\n                            <img src={movie.Poster} alt=\"movieimage\" className=\"w-full h-64\"/>\n                            <div className=\"p-4\">\n                                <p className=\"font-medium text-lg\">Title: <span className=\"font-normal text-base leadin-relaxed\">{movie.Title}</span></p>\n                                <p className=\"font-medium text-lg\">Year of Release: <span className=\"font-normal text-base\">{movie.Year}</span></p>\n                            </div>\n                        </div>\n                    </div> \n                )))}\n            </div>\n        </div>\n    )\n}\n\nexport default SearchMovies","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport Header from './Components/Header';\nimport './tailwind.css';\nimport SearchMovies from './Components/Search';\n\nfunction App() {\n\n  return (\n      <div className=\"relative width-full\">\n        <div className=\"mx-auto overflow-hidden\">\n          <Header/>\n          <SearchMovies/>\n        </div>\n      </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}